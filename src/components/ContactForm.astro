---
export interface Props {
  source: string;
}

const { source } = Astro.props;
const webhookUrl = import.meta.env.PUBLIC_N8N_CONTACT_WEBHOOK;
const authKey = import.meta.env.PUBLIC_N8N_AUTH_KEY;
---

<form id="contact-form" class="space-y-6" data-source={source}>
  <div>
    <label for="name" class="block text-sm font-medium mb-2">Name</label>
    <input
      type="text"
      id="name"
      name="name"
      required
      class="w-full px-4 py-2 border border-charcoal/20 rounded-md focus:ring-2 focus:ring-copper focus:border-copper"
    >
  </div>

  <div>
    <label for="email" class="block text-sm font-medium mb-2">Email</label>
    <input
      type="email"
      id="email"
      name="email"
      required
      class="w-full px-4 py-2 border border-charcoal/20 rounded-md focus:ring-2 focus:ring-copper focus:border-copper"
    >
  </div>

  <div>
    <label for="company" class="block text-sm font-medium mb-2">Company (Optional)</label>
    <input
      type="text"
      id="company"
      name="company"
      class="w-full px-4 py-2 border border-charcoal/20 rounded-md focus:ring-2 focus:ring-copper focus:border-copper"
    >
  </div>

  <div>
    <label for="message" class="block text-sm font-medium mb-2">Message</label>
    <textarea
      id="message"
      name="message"
      rows="4"
      required
      class="w-full px-4 py-2 border border-charcoal/20 rounded-md focus:ring-2 focus:ring-copper focus:border-copper"
    ></textarea>
  </div>

  <button
    type="submit"
    class="w-full bg-copper text-white font-medium py-3 px-6 rounded-md hover:bg-copper-dark transition-colors"
  >
    Send Message
  </button>

  <div id="form-status" class="hidden text-sm"></div>
</form>

<script define:vars={{ webhookUrl, authKey }}>
  const form = document.getElementById('contact-form');
  const status = document.getElementById('form-status');

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const data = {
      name: formData.get('name'),
      email: formData.get('email'),
      company: formData.get('company') || '',
      message: formData.get('message'),
      source: form.dataset.source,
      timestamp: new Date().toISOString()
    };

    try {
      status.textContent = 'Sending...';
      status.classList.remove('hidden', 'text-red-600', 'text-green-600');

      const response = await fetch(webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authKey}`
        },
        body: JSON.stringify(data)
      });

      if (response.ok) {
        status.textContent = 'Message sent successfully!';
        status.classList.add('text-green-600');
        form.reset();

        // Track event
        window.trackEvent('Contact', 'FormSubmit', form.dataset.source);
      } else {
        throw new Error('Submission failed');
      }
    } catch (error) {
      status.textContent = 'Error sending message. Please try again or email directly.';
      status.classList.add('text-red-600');
    }
  });
</script>
